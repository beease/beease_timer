// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  name             String?
  given_name       String
  family_name      String?
  email            String            @unique
  verified_email   Boolean           @default(false)
  picture          String?
  locale           String?
  google_id        String?           @unique
  Inviter          Invitation[]      @relation("InviterUser")
  credential       Credential?       
  memberWorkspaces memberWorkspace[]
  currentSession   memberSession?    @relation("CurrentUserSession", fields: [currentSessionId], references: [id])
  currentSessionId String?           @unique
}

model Credential {
  id       String   @id @default(cuid())
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
  password String
}

model Workspace {
  id               String            @id @default(cuid())
  name             String
  projects         Project[]
  color            String
  membersWorkspace memberWorkspace[]
  Invitation       Invitation[] 
}

model Project {
  id             String          @id @default(cuid())
  name           String
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId    String
  memberSessions memberSession[]
  dailyPrice     Float?       
  hourByDay      Float?          
  color          String
  isArchived     Boolean        @default(false)
}

model memberWorkspace {
  id             String          @id @default(cuid())
  role           Role            @default(MEMBER)
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId    String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  memberSessions memberSession[]
  @@unique([workspaceId, userId])
}

model memberSession {
  id                String           @id @default(cuid())
  startedAt         DateTime         @default(now())
  endedAt           DateTime?
  Project           Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId         String?
  memberWorkspace   memberWorkspace? @relation(fields: [memberWorkspaceId], references: [id], onDelete: Cascade)
  memberWorkspaceId String?
  currentUser       User?             @relation("CurrentUserSession")
}

model Invitation {
  id          String @id @default(cuid())
  date        DateTime @default(now())
  invitedMail String
  inviter     User  @relation("InviterUser", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId   String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String

  @@unique([invitedMail, inviterId, workspaceId])
}